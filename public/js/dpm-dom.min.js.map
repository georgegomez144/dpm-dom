{"version":3,"sources":["dpm-dom.js"],"names":["D","win","undefined","console","NodeList","prototype","forEach","Array","callback","context","i","this","length","bind","bindThis","Object","keys","bindContext","map","newArray","newObject","object1","name","email","number","v","log","reg_isNode","reg_findId","reg_findClass","reg_findAttrs","reg_findDataset","DpmDOM","selector","__selector","_typeof","search","createElement","prepSelectorArray","split","elements","trimmedSelector","trim","querySelectorAll","document","q","push","t","removeAttr","data","css","id","element","match","newElement","classes","classNames","classList","add","attrs","arrAttrs","datasets","dataset","ready","onreadystatechange","readyState","addEventListener","append","prepend","parentNode","insertBefore","addClass","className","removeClass","attr","value","styles","window"],"mappings":"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","file":"dpm-dom.min.js","sourcesContent":["/* \r\n  DpmDOM (D_)\r\n  Created by: George Gomez\r\n  Contact: george144k.dev@gmail.com\r\n  Date Created: 07/25/2018\r\n*/\r\n\r\nvar D = (function (win, undefined) {\r\n\r\n  // for internal debugging\r\n  var $log = console;\r\n  // internal use of prototypes\r\n  NodeList.prototype.forEach = Array.prototype.forEach = function(callback, context) {\r\n    for ( let i = 0; i < this.length; i++ ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[i], i);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[i], i);\r\n      }\r\n    }\r\n    return (context) ? context : this;\r\n  };\r\n  Object.prototype.forEach = function(callback, context) {\r\n    const keys = Object.keys(this);\r\n    for ( let i in keys ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[keys[i]], keys[i]);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[keys[i]], keys[i]);\r\n      }\r\n    }\r\n    return (context) ? context : this;\r\n  };\r\n  NodeList.prototype.map = Array.prototype.map = function(callback, context) {\r\n    let newArray = [];\r\n    for ( let i = 0; i < this.length; i++ ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[i], i);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[i], i);\r\n      }\r\n      newArray[i] = this[i];\r\n    }\r\n    return newArray;\r\n  };\r\n  Object.prototype.map = function(callback, context) {\r\n    let newObject = {};\r\n    const keys = Object.keys(this);\r\n    for ( let i in keys ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[keys[i]], keys[i]);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[keys[i]], keys[i]);\r\n      }\r\n      newObject[keys[i]] = this[keys[i]];\r\n    }\r\n    return newObject;\r\n  };\r\n\r\n  const array1 = ['name','email','address'];\r\n  const array2 = ['other','newname'];\r\n  const object1 = {name:'george',email:'george144k.dev@gmail.com',number:'800-987-1523'};\r\n\r\n  object1.forEach(function(v,i) {\r\n    v = i + ' ' + v;\r\n  });\r\n  console.log(object1);\r\n\r\n  let newArray = array1.map(function(v,i) {\r\n    v = v + ' addition';\r\n  });\r\n  console.log(newArray);\r\n\r\n  // RegExp\r\n  var reg_hasIdSelector = /\\#[a-z0-9\\-\\_]+$/i;\r\n  var reg_hasClassSelector = /(?:\\s)?\\.[a-z0-9\\-\\_]+$/i;\r\n  var reg_hasNodeSelector = /[a-z0-9\\-\\_]+$/i;\r\n  var reg_isNode = /^\\<([a-z0-9\\-\\_]+)\\s/i;\r\n  var reg_findId = /(?:\\sid\\=\\\"([a-z0-9\\-\\_]+)\\\")/i;\r\n  var reg_findClass = /(?:\\sclass\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/i;\r\n  var reg_findAttrs = /(?:\\s(?!class)(?!data\\-)(?!id)([a-z0-9\\-]+)\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/gi;\r\n  var reg_findDataset = /(?:\\sdata\\-([a-z0-9\\-]+)\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/i;\r\n\r\n  var __dom = function (selector) {\r\n    return new DpmDOM(selector);\r\n  };\r\n\r\n  /* Public API */\r\n  function DpmDOM(selector) {\r\n    this.__selector = selector;\r\n    switch (typeof this.__selector) {\r\n      case 'string':\r\n        if (this.__selector.search(reg_isNode) > -1) {\r\n          this[0] = createElement(this.__selector);\r\n          this.length = 1;\r\n        } else {\r\n          const prepSelectorArray = this.__selector.split(',');\r\n          let elements = [];\r\n          for (let i = 0; i < prepSelectorArray.length; i++) {\r\n            const trimmedSelector = prepSelectorArray[i].trim();\r\n            const querySelectorAll = document.querySelectorAll(trimmedSelector);\r\n            for (let q = 0; q < querySelectorAll.length; q++) elements.push(querySelectorAll[q]);\r\n          }\r\n          for (let i = 0; i < elements.length; i++) this[i] = elements[i];\r\n          this.length = elements.length;\r\n        }\r\n        break;\r\n      case 'object':\r\n        this[0] = this.__selector;\r\n        this.length = 1;\r\n        break;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  let t;\r\n\r\n  DpmDOM.prototype = {\r\n    ready: function (callback) {\r\n      for (t = 0; t < this.length; t++) {\r\n        if (this.__selector === document) {\r\n          document.onreadystatechange = function () {\r\n            if (document.readyState === 'complete') {\r\n              callback();\r\n            }\r\n          };\r\n        } else {\r\n          this[t].addEventListener('load', callback);\r\n        }\r\n      }\r\n    },\r\n    forEach: function(callback) {\r\n      for ( t = 0; t < this.length; t++ ) callback(this[t], t);\r\n      return this;\r\n    },\r\n    append: function(element) {\r\n      if(typeof element === 'string') element = createElement(element);\r\n      for(t = 0; t < this.length; t++) {\r\n        this[t].appendChild(element);\r\n      }\r\n      return this;\r\n    },\r\n    prepend: function(element) {\r\n      for(t=0;t<this.length;t++) {\r\n        if(typeof element === 'string') element = createElement(element);\r\n        this[t].parentNode.insertBefore(element, this[t]);\r\n      }\r\n      return this;\r\n    },\r\n    addClass: function(className) {\r\n      var classNames = className.split(' ');\r\n\r\n      return this;\r\n    },\r\n    removeClass: function(className) {\r\n      if(!className) {\r\n        // remove all classes\r\n      } else {\r\n\r\n      }\r\n      return this;\r\n    },\r\n    prop: function(prop, value) {},\r\n    attr: function(attr, value) {},\r\n    removeAttr: function(attr) {},\r\n    data: function(data, value) {},\r\n    css: function(styles) {}\r\n  };\r\n\r\n  /* Internal Functions */\r\n  function createElement(element) {\r\n    let newElement, id, classes, attrs, datasets;\r\n    newElement = document.createElement( element.match(reg_isNode)[1] );\r\n    if(id = element.match(reg_findId)) newElement.id = id[1];\r\n    if(classes = element.match(reg_findClass)) {\r\n      let classNames = classes[1].split(' ');\r\n      for(let i = 0; i < classNames.length; i++) {\r\n        newElement.classList.add(classNames[i]);\r\n      }\r\n    }\r\n    if(attrs = element.match(reg_findAttrs)) {\r\n      for(let i = 0; i < attrs.length; i++) {\r\n        const arrAttrs = attrs[i].trim().split('=');\r\n        newElement[arrAttrs[0]] = arrAttrs[1];\r\n      }\r\n    }\r\n    if(datasets = element.match(reg_findDataset)) newElement.dataset[datasets[1]] = datasets[2];\r\n    return newElement;\r\n  }\r\n\r\n  return (__dom);\r\n\r\n})(window || this);"]}