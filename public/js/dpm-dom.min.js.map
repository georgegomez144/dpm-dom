{"version":3,"sources":["dpm-dom.js"],"names":["D","win","undefined","console","NodeList","prototype","forEach","Array","callback","context","i","this","length","bind","bindThis","Object","keys","bindContext","map","newArray","newObject","object1","name","email","number","v","log","reg_isNode","DpmDOM","selector","__selector","_typeof","search","createElement","prepSelectorArray","split","elements","trimmedSelector","trim","querySelectorAll","document","q","push","t","removeAttr","data","css","wrapper","childNodes","ready","onreadystatechange","readyState","addEventListener","append","element","prepend","parentNode","insertBefore","addClass","className","removeClass","attr","value","styles"],"mappings":"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","file":"dpm-dom.min.js","sourcesContent":["/* \r\n  DpmDOM (D_)\r\n  Created by: George Gomez\r\n  Contact: george144k.dev@gmail.com\r\n  Date Created: 07/25/2018\r\n*/\r\n\r\nconst D = (function (win, undefined) {\r\n\r\n  // for internal debugging\r\n  const $log = console;\r\n  // internal use of prototypes\r\n  NodeList.prototype.forEach = Array.prototype.forEach = function(callback, context) {\r\n    for ( let i = 0; i < this.length; i++ ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[i], i);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[i], i);\r\n      }\r\n    }\r\n    return (context) ? context : this;\r\n  };\r\n  Object.prototype.forEach = function(callback, context) {\r\n    const keys = Object.keys(this);\r\n    for ( let i in keys ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[keys[i]], keys[i]);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[keys[i]], keys[i]);\r\n      }\r\n    }\r\n    return (context) ? context : this;\r\n  };\r\n  NodeList.prototype.map = Array.prototype.map = function(callback, context) {\r\n    let newArray = [];\r\n    for ( let i = 0; i < this.length; i++ ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[i], i);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[i], i);\r\n      }\r\n      newArray[i] = this[i];\r\n    }\r\n    return newArray;\r\n  };\r\n  Object.prototype.map = function(callback, context) {\r\n    let newObject = {};\r\n    const keys = Object.keys(this);\r\n    for ( let i in keys ) {\r\n      if(context) {\r\n        let bindContext = callback.bind(context);\r\n        bindContext(this[keys[i]], keys[i]);\r\n      } else {\r\n        let bindThis = callback.bind(this)\r\n        bindThis(this[keys[i]], keys[i]);\r\n      }\r\n      newObject[keys[i]] = this[keys[i]];\r\n    }\r\n    return newObject;\r\n  };\r\n\r\n  const array1 = ['name','email','address'];\r\n  const array2 = ['other','newname'];\r\n  const object1 = {name:'george',email:'george144k.dev@gmail.com',number:'800-987-1523'};\r\n\r\n  object1.forEach(function(v,i) {\r\n    v = i + ' ' + v;\r\n  });\r\n  console.log(object1);\r\n\r\n  let newArray = array1.map(function(v,i) {\r\n    v = v + ' addition';\r\n  });\r\n  console.log(newArray);\r\n\r\n  // RegExp\r\n  const reg_hasIdSelector = /\\#[a-z0-9\\-\\_]+$/i;\r\n  const reg_hasClassSelector = /(?:\\s)?\\.[a-z0-9\\-\\_]+$/i;\r\n  const reg_hasNodeSelector = /[a-z0-9\\-\\_]+$/i;\r\n  const reg_isNode = /^\\<([a-z0-9\\-\\_]+)\\s/i;\r\n  const reg_findId = /(?:\\sid\\=\\\"([a-z0-9\\-\\_]+)\\\")/i;\r\n  const reg_findClass = /(?:\\sclass\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/i;\r\n  const reg_findAttrs = /(?:\\s(?!class)(?!data\\-)(?!id)([a-z0-9\\-]+)\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/gi;\r\n  const reg_findDataset = /(?:\\sdata\\-([a-z0-9\\-]+)\\=\\\"([a-z0-9\\-\\_\\s]+)\\\")/i;\r\n\r\n  const __dom = function (selector) {\r\n    return new DpmDOM(selector);\r\n  };\r\n\r\n  /* Public API */\r\n  function DpmDOM(selector) {\r\n    this.__selector = selector;\r\n    switch (typeof this.__selector) {\r\n      case 'string':\r\n        if (this.__selector.search(reg_isNode) > -1) {\r\n          this[0] = createElement(this.__selector);\r\n          this.length = 1;\r\n        } else {\r\n          const prepSelectorArray = this.__selector.split(',');\r\n          let elements = [];\r\n          for (let i = 0; i < prepSelectorArray.length; i++) {\r\n            const trimmedSelector = prepSelectorArray[i].trim();\r\n            const querySelectorAll = document.querySelectorAll(trimmedSelector);\r\n            for (let q = 0; q < querySelectorAll.length; q++) elements.push(querySelectorAll[q]);\r\n          }\r\n          for (let i = 0; i < elements.length; i++) this[i] = elements[i];\r\n          this.length = elements.length;\r\n        }\r\n        break;\r\n      case 'object':\r\n        this[0] = this.__selector;\r\n        this.length = 1;\r\n        break;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  let t;\r\n\r\n  DpmDOM.prototype = {\r\n    ready: function (callback) {\r\n      for (t = 0; t < this.length; t++) {\r\n        if (this.__selector === document) {\r\n          document.onreadystatechange = function () {\r\n            if (document.readyState === 'complete') {\r\n              callback();\r\n            }\r\n          };\r\n        } else {\r\n          this[t].addEventListener('load', callback);\r\n        }\r\n      }\r\n    },\r\n    forEach: function(callback) {\r\n      for ( t = 0; t < this.length; t++ ) callback(this[t], t);\r\n      return this;\r\n    },\r\n    append: function(element) {\r\n      if(typeof element === 'string') element = createElement(element);\r\n      for(t = 0; t < this.length; t++) {\r\n        this[t].appendChild(element);\r\n      }\r\n      return this;\r\n    },\r\n    prepend: function(element) {\r\n      for(t=0;t<this.length;t++) {\r\n        if(typeof element === 'string') element = createElement(element);\r\n        this[t].parentNode.insertBefore(element, this[t]);\r\n      }\r\n      return this;\r\n    },\r\n    addClass: function(className) {\r\n      var classNames = className.split(' ');\r\n\r\n      return this;\r\n    },\r\n    removeClass: function(className) {\r\n      if(!className) {\r\n        // remove all classes\r\n      } else {\r\n\r\n      }\r\n      return this;\r\n    },\r\n    prop: function(prop, value) {},\r\n    attr: function(attr, value) {},\r\n    removeAttr: function(attr) {},\r\n    data: function(data, value) {},\r\n    css: function(styles) {}\r\n  };\r\n\r\n  /* Internal Functions */\r\n  function createElement(element) {\r\n    var wrapper = document.createElement('div');\r\n    wrapper.innerHTML = element;\r\n    return wrapper.childNodes[0];\r\n  }\r\n\r\n  return (__dom);\r\n\r\n})(window || this);"]}